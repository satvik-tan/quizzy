name: Deploy Node.js to Vercel

on:
  push:
    branches:
      - main # or your main branch
  pull_request:
    branches:
      - main # or your main branch

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Detect Package Manager
        id: detect-package-manager
        run: |
          if [ -f "yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
          elif [ -f "pnpm-lock.yaml" ]; then
            echo "manager=pnpm" >> $GITHUB_OUTPUT
          else
            echo "manager=npm" >> $GITHUB_OUTPUT
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18' # Choose your node version
          cache: ${{ steps.detect-package-manager.outputs.manager }}

      - name: Install Dependencies
        run: |
          if [ "${{ steps.detect-package-manager.outputs.manager }}" == "yarn" ]; then
            yarn install --frozen-lockfile
          elif [ "${{ steps.detect-package-manager.outputs.manager }}" == "pnpm" ]; then
            pnpm install --frozen-lockfile
          else
            npm ci
          fi

      - name: Build Project
        run: |
          if [ "${{ steps.detect-package-manager.outputs.manager }}" == "yarn" ]; then
            yarn build
          elif [ "${{ steps.detect-package-manager.outputs.manager }}" == "pnpm" ]; then
            pnpm build
          else
            npm run build
          fi
        env:
          # Add any build-time environment variables here
          # For example:
          # NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v20
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          # Optional:
          # working-directory: ./my-subdir # If your project is in a subdirectory
          # vercel-args: --prod # Optional: pass any vercel arguments here

      - name: Slack Notification (Success)
        if: success()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_COLOR: '#2eb886' # Green
          SLACK_TITLE: "Deployment Successful"
          SLACK_MESSAGE: "Deployment to Vercel successful!"

      - name: Slack Notification (Failure)
        if: failure()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_COLOR: '#e01e5a' # Red
          SLACK_TITLE: "Deployment Failed"
          SLACK_MESSAGE: "Deployment to Vercel failed. Check the logs."