name: Deploy Node.js app to Vercel

on:
  push:
    branches:
      - main # or your main branch
  pull_request:
    branches:
      - main # or your main branch

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "yarn.lock" ]; then
            echo "package-manager=yarn" >> "$GITHUB_OUTPUT"
          elif [ -f "pnpm-lock.yaml" ]; then
            echo "package-manager=pnpm" >> "$GITHUB_OUTPUT"
          else
            echo "package-manager=npm" >> "$GITHUB_OUTPUT"
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18' # or your desired Node.js version
          cache: ${{ steps.detect-package-manager.outputs.package-manager }}

      - name: Install dependencies
        run: |
          if [ "${{ steps.detect-package-manager.outputs.package-manager }}" == "yarn" ]; then
            yarn install --frozen-lockfile
          elif [ "${{ steps.detect-package-manager.outputs.package-manager }}" == "pnpm" ]; then
            pnpm install --frozen-lockfile
          else
            npm ci
          fi

      - name: Build application
        run: |
          if [ "${{ steps.detect-package-manager.outputs.package-manager }}" == "yarn" ]; then
            yarn build
          elif [ "${{ steps.detect-package-manager.outputs.package-manager }}" == "pnpm" ]; then
            pnpm build
          else
            npm run build
          fi
        env:
          # You can add your environment variables here
          # For example:
          # NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v20
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: . # Adjust this if your build output is in a subdirectory
          environment: production # Set this to 'preview' for pull requests
          github-comment: true
        env:
          # You can add your environment variables here. These override the build ones.
          # However, it's best to define secrets within Vercel instead.
          # NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
          # VERCEL_ENV: production # Or 'preview' for pull requests
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Send Slack Notification (Optional)
        if: failure()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_CHANNEL: your-slack-channel # Replace with your Slack channel
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }} # Store your Slack webhook URL as a secret
          SLACK_TITLE: "Deployment Failed"
          SLACK_MESSAGE: "Deployment to Vercel failed. Check the logs for details."